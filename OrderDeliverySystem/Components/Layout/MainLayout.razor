@using MudBlazor
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Height="Auto" Class="p-3 bg-white">
        <NavMenu />
    </MudAppBar>

    @if (isAdmin || isMerchant || isDeliveryWorker){
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Style="min-height:700px;">
            <LeftNavBar />
        </MudDrawer>
        <MudMainContent Class="my-1" Style="min-height:700px;">

            @Body
        </MudMainContent>
    }
    else
    {
        <MudMainContent Class="my-1" Style="min-height:700px;">

            @Body

        </MudMainContent>
    }
   
    <MudPaper Bottom="true" Class="mt-4 bg-light p-5"  Fixed="false">
       
        <Footer />
    </MudPaper>
    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    
</MudLayout>

@code {
    //string _role = "Admin";
    //string _role = "Merchant";
    //string _role = "Guest";
    //string _role = "Customer";
    // string _role = "Worker";


   @* private bool isAdmin;
    private bool isCustomer;
    private bool isMerchant;
    private bool isDeliveryWorker;
    private bool isGuest;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        isAdmin = user.IsInRole("Admin");
        isCustomer = user.IsInRole("Customer");
        isMerchant = user.IsInRole("Merchant");
        isDeliveryWorker = user.IsInRole("Worker");
        isGuest = (!isAdmin || !isCustomer || !isMerchant || !isDeliveryWorker);
    }*@

    private bool isAdmin;
    private bool isCustomer;
    private bool isMerchant;
    private bool isDeliveryWorker;
    private bool isGuest;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAdmin = user.IsInRole("Admin");
        isCustomer = user.IsInRole("Customer");
        isMerchant = user.IsInRole("Merchant");
        isDeliveryWorker = user.IsInRole("Worker");
        isGuest = (!isAdmin || !isCustomer || !isMerchant || !isDeliveryWorker);
    }
  
    bool _drawerOpen = true;
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }
}
@code {
    
}
