@using MudBlazor
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Client.Pages.Customer
@using OrderDeliverySystem.Components
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<MudHidden Class="my-10" Breakpoint="Breakpoint.MdAndUp" Invert="true">
<AuthorizeView Roles="Admin,Merchant,Worker">
    <Authorized>
        <MudLink Href="/"><MudImage Src="images/logo.png" Width="120" Height="80" Alt="Swedish Farm House" Href="/dashboard" Class="rounded-lg m-4" /></MudLink>
    </Authorized>
   <NotAuthorized>
        <MudLink Href="/"><MudImage Src="images/logo.png" Width="120" Height="80" Alt="Swedish Farm House" Href="/" Class="rounded-lg m-4" /></MudLink>
    </NotAuthorized>
</AuthorizeView>
    <MudSpacer />

    
<AuthorizeView Roles="Customer">
    <Authorized>
        <MudButtonGroup Color="Color.Dark" Variant="Variant.Text">
            <MudButton Href="/restaurants">Restaurants</MudButton>
            <MudButton Href="/about-us">About Us</MudButton>
            <MudButton Href="/contact">Contact</MudButton>
            <MudButton Href="/my-orders">My Orders</MudButton>
        </MudButtonGroup>
            <MudSpacer />
        <MudIconButton OnClick="OnExpandCartClick" Icon="@Icons.Material.Filled.AddShoppingCart" Style="color: rgba(168, 0, 0, 1);">@(_cartExpanded ? "" : "")</MudIconButton>
        <MudIconButton Href="/customer-profile" Icon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" />
    </Authorized>
</AuthorizeView>
<AuthorizeView>
     
    <NotAuthorized>
        <MudButtonGroup Color="Color.Dark" Variant="Variant.Text">
            <MudButton Href="/restaurants">Restaurants</MudButton>
            <MudButton Href="/about-us">About Us</MudButton>
            <MudButton Href="/contact">Contact</MudButton>
            <MudButton Href="/register">Sign Up</MudButton>
        </MudButtonGroup>
    </NotAuthorized>
</AuthorizeView>


<AuthorizeView>
    @*Example of set with role: <AuthorizeView Roles="Admin">*@
    <Authorized>
        <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Log Out" OnClick="LogOut" />
    </Authorized>
    <NotAuthorized>
        <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Login" Href="/login" />
    </NotAuthorized>
</AuthorizeView>
    
</MudHidden>

    <MudCollapse Expanded="_cartExpanded" >
        @if (_cartExpanded)
        {
        <Cart OnClose="CloseCart" />
        }
    </MudCollapse>




@code{
 
    ///bool isCustomer = false;
    //string _role = "Admin";
    //string _role = "Merchant";
    //string _role = "Guest";
    //string _role = "Customer";
    // string _role = "Worker";


    @*
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        isCustomer = user.IsInRole("Customer");
        isMerchant = user.IsInRole("Merchant");
        isDeliveryWorker = user.IsInRole("DeliveryWorker");
        isGuest = (!isAdmin || !isCustomer || !isMerchant || !isDeliveryWorker);
    }*@
    [Inject]
    private IAuthService AuthService { get; set; }
    bool _cartExpanded = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
     
    }
    bool _menuExpanded = true;

    private void OnExpandMenuClick()
    {
        _menuExpanded = !_menuExpanded;
    }
    private void OnExpandCartClick()
    {
        _cartExpanded = !_cartExpanded;
    }

    private void CloseCart()
    {
        _cartExpanded = false; 
    }
      
    public async Task LogOut()
    {
        if (AuthService != null)
        {
            await AuthService.Logout();
            CloseCart();
            NavigationManager.NavigateTo("/");
        }
    }
    public async Task LogIn()
    {
        NavigationManager.NavigateTo("/login");
    }

   

    
}