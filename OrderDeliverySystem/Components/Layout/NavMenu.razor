﻿@using MudBlazor
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Client.Pages.Customer
@using OrderDeliverySystem.Components
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto


@if (isCustomer || isGuest)
{
    <MudLink Href="/"><MudImage Src="images/logo.png" Width="120" Height="80" Alt="Swedish Farm House" Href="/" Class="rounded-lg m-4" /></MudLink>

    <MudSpacer />
    <MudButtonGroup Color="Color.Dark" Variant="Variant.Text">
        <MudButton Href="/restaurants">Restaurants</MudButton>
        <MudButton Href="/about-us">About Us</MudButton>
        <MudButton Href="/contact">Contact</MudButton>


        @if (isCustomer)
        {
            <MudButton Href="/my-orders">My Orders</MudButton>
        }
        else
        {
            <MudButton Href="/register">Sign Up</MudButton>
        }

    </MudButtonGroup>
    <MudSpacer />

    @if (isCustomer)
    {

        <MudIconButton OnClick="OnExpandCartClick" Icon="@Icons.Material.Filled.AddShoppingCart" Style="color: rgba(168, 0, 0, 1);">@(_cartExpanded ? "" : "")</MudIconButton>
        <MudIconButton Href="/customer-profile" Icon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" />

        <MudFab Style="color: rgba(168, 0, 0, 1);" Label="Log Out" OnClick="LogOut" />

    }
    else
    {
        <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Login" OnClick="LogIn" />
    }

}
else
{
    <MudButton Href="/"><MudImage Src="images/logo.png" Width="120" Height="80" Alt="Swedish Farm House" Href="/dashboard" Class="rounded-lg m-4" /></MudButton>

    <MudSpacer />
    <AuthorizeView>
        @*Example of set with role: <AuthorizeView Roles="Admin">*@
        <Authorized>
            <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Log Out" OnClick="LogOut" />
        </Authorized>
        <NotAuthorized>
            <MudFab StartIcon="@Icons.Material.Filled.PersonOutline" Style="color: rgba(168, 0, 0, 1);" Label="Login" Href="/login" />
        </NotAuthorized>
    </AuthorizeView>
}


<MudCollapse Expanded="_cartExpanded">
    @if (_cartExpanded)
    {
        <Cart OnClose="CloseCart" />
    }
</MudCollapse>



@code {
    [Inject]
    public AuthService AuthService { get; set; }

    ///bool isCustomer = false;
    //string _role = "Admin";
    //string _role = "Merchant";
    //string _role = "Guest";
    //string _role = "Customer";
    // string _role = "Worker";


    @*
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        isCustomer = user.IsInRole("Customer");
        isMerchant = user.IsInRole("Merchant");
        isDeliveryWorker = user.IsInRole("DeliveryWorker");
        isGuest = (!isAdmin || !isCustomer || !isMerchant || !isDeliveryWorker);
    }*@

    bool _cartExpanded = false;
    private bool isAdmin;
    private bool isCustomer;
    private bool isMerchant;
    private bool isDeliveryWorker;
    private bool isGuest;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
        isCustomer = user.IsInRole("Customer");
        isMerchant = user.IsInRole("Merchant");
        isDeliveryWorker = user.IsInRole("DeliveryWorker");
        isGuest = (!isAdmin || !isCustomer || !isMerchant || !isDeliveryWorker);

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        _cartExpanded = false;
        StateHasChanged();
    }


    private void OnExpandCartClick()
    {
        _cartExpanded = !_cartExpanded;
    }

    private void CloseCart()
    {
        _cartExpanded = false;
    }

    public async Task LogOut()
    {
        if (AuthService != null)
        {
            await AuthService.Logout();
            CloseCart();
            StateHasChanged();
            NavigationManager.NavigateTo("/");
        }
    }
    public async Task LogIn()
    {
        NavigationManager.NavigateTo("/login");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }


}