@page "/order-now"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization;
@using OrderDeliverySystem.Client.Shared.Common
@using OrderDeliverySystem.Client.Shared
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Share.DTOs.CartDTO
@using OrderDeliverySystem.Share.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@using OrderDeliverySystem.Client.Infrastructure.Services.Authentication
@using System.Security.Claims
@using OrderDeliverySystem.Client.Infrastructure.Services.Orders
@using OrderDeliverySystem.Client.Infrastructure.Services.Profile
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IProfileService ProfileService
@inject OrderService Orderservice
@inject NavigationManager Navigation
@rendermode InteractiveServer


<MudContainer Class="my-10">
@if (isLoading)
{
    <MudText Typo="Typo.body1">Loading...</MudText>
}
else
{
    <MudText Class="pt-4" Typo="Typo.h4" Align="Align.Start" GutterBottom="true">Place Order</MudText>
    <MudDivider Class=" border-4" Style="border-color:rgba(112, 0, 0, 1);" />
   <MudContainer Class="my-3">
        <MudText Class="pt-4" Typo="Typo.h6" Align="Align.Start" GutterBottom="true" Style="color:rgba(112, 0, 0, 1);">Customer Info</MudText>
        <MudDivider Class=" border-2" Style="border-color:rgba(112, 0, 0, 1);" />
           
          <AddressCreate/> 
         
       
    </MudContainer>
    <MudContainer Class="my-3">
        <MudText Class="pt-4" Typo="Typo.h6" Align="Align.Start" GutterBottom="true" Style="color:rgba(112, 0, 0, 1);">Place Order</MudText>
            <MudDivider Class=" border-2" Style="border-color:rgba(112, 0, 0, 1);" />
            @if (order != null && order.Merchants != null && order.Merchants.Count > 0)
        {
                <p>@order.Customer.CustomerId</p>
            @foreach (var merchant in order.Merchants)
            {

            <MudGrid >
                <MudItem xs="12" sm="12" md="3">
                    <MudGrid Class="ps-10 " >
                        <MudItem xs="12" >
                             <MudImage Src="@merchant.MerchantPic" Width="120" Height="80" Alt="Swedish Farm House" Class="rounded-lg mt-4" />
                        </MudItem>
                    
                        <MudItem xs="12">
                            <MudText Typo="Typo.h5">@merchant.BusinessName</MudText>
                        </MudItem>
                        <MudItem xs="2">
                            <MudIcon Class="inline-block" Icon="@Icons.Material.Outlined.AccessTime"></MudIcon>
                        </MudItem>
                        <MudItem xs="10">
                                <MudText Typo="Typo.body2">Time:Time: </MudText>
                            </MudItem>
                        <MudItem xs="2">
                            <MudIcon Class="inline-block" Icon="@Icons.Material.Outlined.LocationOn"></MudIcon>
                        </MudItem>
                        <MudItem xs="10">
                            <MudText Typo="Typo.body2">Address: This Merchant's Address'</MudText>
                        </MudItem>
                    </MudGrid>

                </MudItem>
        
           
                <MudItem xs="12" sm="9" md="9"> 
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="8">
                           <MudText>show the info</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="4">
                            <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Total(Before tax):  $19.98</MudText>
                            <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Tax (15%):  $2.99</MudText>
                            <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Total(After tax):  $22.98</MudText>
                            <MudText Class="pt-4 ps-6 border-b-2 border-solid mb-2" Typo="Typo.body2" Align="Align.Start" GutterBottom="true" Style="border-color:rgba(112, 0, 0, 1);">Delevery Fee:  $6 ( $3/ km )</MudText>
                            <MudText Class="pt-4 ps-6" Typo="Typo.subtitle2" Align="Align.Start" GutterBottom="true">Total Amount:  $28.98</MudText>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
                <MudDivider Class="mt-5 border-2" Style="border-color:rgba(112, 0, 0, 1);" />
        }         
    }
       
    </MudContainer>
    <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" >Register</MudButton>
    </MudCardActions>
    }
</MudContainer>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private ClaimsPrincipal user;

    [Parameter]
    public int UserId { get; set; }


    private const decimal TaxRate = 0.15m;
    private const decimal DeliveryFee = 6.00m;
    int theCustomerId;
    int merchantId;
    int itemId;

    decimal subtotal;
    private decimal total;
    private decimal fee;
    private decimal totalAmount;

    private CreateOrderDTO order = new();

    private bool isLoading = true;
    bool success;

    [Inject]
    private IAuthService AuthService { get; set; }

    public string SelectedOption { get; set; } 

    private UserProfileDTO model = new();

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
    
        await LoadCreateOrder();
    }

    private async Task LoadCreateOrder()
    {
        try
        {
            var response = await Orderservice.GetPlacedOrder();

            if (response != null)
            {
                order = response;
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
 
    }

    private decimal GetTaxAmount()
    {
        return subtotal * TaxRate;
    }
    private decimal GetTotalAfterTax()
    {
        return subtotal + GetTaxAmount();
    }
    private decimal GetTotalAmount()
    {
        return GetTotalAfterTax() + DeliveryFee;
    }
    private async Task OrderCreationSubmit()
    {

        await Orderservice.CreateOrder(order);
        StateHasChanged();
        Navigation.NavigateTo("/my-orders", forceLoad: true);
       
    }

}
