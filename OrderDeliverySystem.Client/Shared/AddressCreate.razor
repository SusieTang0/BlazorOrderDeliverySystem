
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization;
@using MudBlazor
@using Newtonsoft.Json
@using OrderDeliverySystem.Client.Pages.Customer
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Shared.Common
@using System.Security.Claims
@using OrderDeliverySystem.Client.Infrastructure.Services.Profile
@using System.Text.Json
@inject IHttpClientFactory httpClientFactory
@inject NavigationManager NavigationManager
@inject IProfileService ProfileService
@inject IAddressService AddressService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@rendermode InteractiveAuto


<MudForm>
    <MudRadioGroup @bind-Value="SelectedOption">
        @if (model.Address == "" || model.City == "" || model.Province == "" || model.Postcode == "")
    {
            <MudFab Label="Please update your address" />
        }
        else
        {
            <MudRadio Value="@("Radio 1")">Default Addresses</MudRadio>
            <MudRadio Value="@("Radio 2")" Color="Color.Primary">Pick Another Address</MudRadio>
        }
    </MudRadioGroup>
</MudForm>

@if (SelectedOption == "Radio 1")
{
    <MudText Class="" Typo="Typo.h6">Default Address : </MudText>
    <MudText Typo="Typo.subtitle1">Name : @model.ContactName</MudText>
    <MudText Typo="Typo.subtitle1">Phone : @model.Phone</MudText>
           
    @if (!string.IsNullOrEmpty(model.Unit))
    {
        <MudText Typo="Typo.subtitle1">
                    Address : @model.Unit, @model.Address, @model.City, @model.Postcode</MudText>
    }
    else
    {
        <MudText Typo="Typo.subtitle1">
                    Address : @model.Address, @model.City, @model.Postcode</MudText>
    }

}
else if (SelectedOption == "Radio 2")
{
    <MudText Typo="Typo.h6">Select a new address:</MudText>

    <MudRadioGroup T="AddressCreateDTO" @bind-Value="SelectedAddress" @onchange="HandleAddressSelection">
        @foreach (var address in list)
        {
            <div>
                <MudRadio Value="address" @key="address.AddressId" >
                    @($"{address.ContactName} {address.Address}, {address.City}, {address.Postcode}")
                </MudRadio>
                <MudLink Href="javascript:void(0)" OnClick="@(() => OpenEditAddressDialog(address.AddressId))">
                    Edit address
                </MudLink>
            </div>
        }
    </MudRadioGroup>

    <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Default" /><MudLink Href="javascript:void(0)" OnClick="@(() => OpenCreateAddressDialog())">
        Add new address
    </MudLink>

    @if (SelectedAddress != null)
    {
        <MudText Typo="Typo.h6">Selected Address: </MudText>
        <MudText Typo="Typo.subtitle1">Name : @SelectedAddress.ContactName</MudText>
        <MudText Typo="Typo.subtitle1">Phone : @SelectedAddress.Phone</MudText>

        @if (!string.IsNullOrEmpty(SelectedAddress.Unit))
        {
            <MudText Typo="Typo.subtitle1">Address : @SelectedAddress.Unit, @SelectedAddress.Address, @SelectedAddress.City, @SelectedAddress.Postcode</MudText>
        }
        else
        {
            <MudText Typo="Typo.subtitle1">Address : @SelectedAddress.Address, @SelectedAddress.City, @SelectedAddress.Postcode</MudText>
        }

        <MudButton OnClick="ConfirmSelectedAddress">Confirm Address</MudButton>
    }
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private ClaimsPrincipal user;

    [Parameter]
    public int UserId { get; set; }
    [Parameter] public EventCallback<int> OnAddressConfirmed { get; set; }

    public string SelectedOption { get; set; } = "Radio 1";
    private AddressCreateDTO model = new();
    private List<AddressCreateDTO> list = new List<AddressCreateDTO>();// Ensure model is initialized


    public bool ShowErrors { get; set; } = false;
    public string SuccessMessage { get; set; } = "";
    public string Errors { get; set; } = string.Empty;

    private AddressCreateDTO _selectedAddress = new();

    private AddressCreateDTO SelectedAddress
    {
        get => _selectedAddress;
        set
        {
            _selectedAddress = value;
            if (_selectedAddress != null)
            {
                OnAddressConfirmed.InvokeAsync(_selectedAddress.AddressId);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        list = await AddressService.GetAddressList();
        var mainAddress = list.FirstOrDefault(a => a.Type == "Main");

        if (mainAddress != null)
        {
            model = mainAddress;
            SelectedAddress = mainAddress;
            await OnAddressConfirmed.InvokeAsync(model.AddressId);
        }
        else
        {
            await OnAddressConfirmed.InvokeAsync(-1);
        }

    }

    private async Task ConfirmSelectedAddress()
    {
        if (SelectedAddress != null)
        {
            UpdateModelWithSelectedAddress();
            await OnAddressConfirmed.InvokeAsync(SelectedAddress.AddressId);
            SelectedOption = "Radio 1"; 
        }
    }

    private void HandleAddressSelection(ChangeEventArgs e)
    {
        var selectedAddressId = int.Parse(e.Value.ToString());
        var selectedAddress = list.FirstOrDefault(a => a.AddressId == selectedAddressId);
        if (selectedAddress != null)
        {
            SelectedAddress = selectedAddress;
        }
    }

    private void UpdateModelWithSelectedAddress()
    {
        if (SelectedAddress != null)
        {
            model.AddressId = SelectedAddress.AddressId;
            model.Address = SelectedAddress.Address;
            model.City = SelectedAddress.City;
            model.Province = SelectedAddress.Province;
            model.Postcode = SelectedAddress.Postcode;
            model.Unit = SelectedAddress.Unit;
            model.ContactName = SelectedAddress.ContactName;
            model.Phone = SelectedAddress.Phone;
        }
    }

    private async Task OpenEditAddressDialog(int addressId)
    {
        var parameters = new DialogParameters<EditAddressDialog>
        {
            { x => x.AddressId, addressId }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };

        var dialogReference = DialogService.Show<EditAddressDialog>($"Edit Address", parameters, options);

        var result = await dialogReference.Result;

        if (!result.Canceled && result.Data is bool isUpdated && isUpdated)
        {
            list = await AddressService.GetAddressList();
            StateHasChanged();
        }
    }

    private async Task OpenCreateAddressDialog()
    {

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };

        var dialogReference = DialogService.Show<CreateAddressDialog>($"Create Address",options);

        var result = await dialogReference.Result;

        if (!result.Canceled && result.Data is bool isUpdated && isUpdated)
        {
            list = await AddressService.GetAddressList();
            StateHasChanged();
        }
    }
}
