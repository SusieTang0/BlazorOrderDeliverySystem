

@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@using OrderDeliverySystem.Client.Shared.Common
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using OrderDeliverySystem.Share.DTOs
@using OrderDeliverySystem.Client.Infrastructure.Services.Review
@using OrderDeliverySystem.Share.DTOs.ReviewDTO



<MudPaper Class="pa-10" Elevation="3" Style="position: absolute; top: 100px; right: 120px; z-index: 1800; width: 400px;">
    <div class="d-flex justify-content-between align-items-center">
        <MudText Typo="Typo.h5" Style="color:rgba(112, 0, 0, 1);">Create Review</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Close" Style="color: rgba(112, 0, 0, 1);" OnClick="OnClose" />
    </div>
    <MudDivider Class="mb-2" Style="border-color:rgba(112, 0, 0, 1);" />
    <MudText Typo="Typo.subtitle1">Order Id : @OrderId</MudText>
    <MudText Class="my-3" Typo="Typo.body1">Please rate and leave your review here</MudText>
        
            <MudRating @bind-SelectedValue="newReview.Rating" Size="Size.Medium" Label="Rating" Required="true" />
            <MudTextField @bind-Value="newReview.Comment" Label="Comment" Lines="5" Required="true" />
           
    <div class="my-3 d-flex justify-content-between align-items-center">
        <MudButton Class="rounded-pill" Style="width:40%;color:white; background-color: rgba(112, 0, 0, 1);" OnClick="@(() => ShowSubmitDialog())">Submit</MudButton>
        <MudButton Class="rounded-pill" Style="width:40%; background-color:lightgrey; color: rgba(112, 0, 0, 1);" OnClick="ResetForm">Reset</MudButton>
    </div>
    @if (showSubmitDialog)
    {
        <div class="custom-dialog-backdrop">
            <div class="custom-dialog">
                <MudText Typo="Typo.h6">Submit Review Confirmation</MudText>
                <MudText Typo="Typo.body1">Are you sure you want to submit this review?</MudText>
                <MudButton OnClick="@(async () => await CreateReview())" Color="Color.Primary" Class="mt-2">Yes</MudButton>
                <MudButton OnClick="CancelSubmit" Color="Color.Default" Class="mt-2">No</MudButton>
            </div>
        </div>
    }
    
</MudPaper>





<MudContainer Class="my-10 d-flex justify-content-center" MaxWidth="MaxWidth.ExtraLarge" Style="min-height:620px">
    <MudPaper Class="px-16 pt-10 ma-2 " Elevation="3" Width="100%">
            
       
        <MudPaper Class="pa-4">

            <EditForm>
                <ErrorsList ShowErrors="@showErrors" Errors="@errors" />
            <MudText Typo="Typo.h5">Customer Create Review</MudText>
            <MudRating @bind-SelectedValue="newReview.Rating" Size="Size.Medium" Label="Rating" Required="true" />
            <MudTextField @bind-Value="newReview.Comment" Label="Comment" Lines="5" Required="true" />
              
            <MudButton OnClick="@(() => ShowSubmitDialog())" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
            <MudButton Type="button" Variant="Variant.Filled" Color="Color.Secondary" OnClick="ResetForm">Cancel</MudButton>
            </EditForm>
        </MudPaper>
            
        <MudText Typo="Typo.h5" Color="Color.Error">Unauthorized: You do not have permission to create reviews.</MudText>
            
    </MudPaper>
</MudContainer>


@if (showSubmitDialog)
{
    <div class="custom-dialog-backdrop">
        <div class="custom-dialog">
            <MudText Typo="Typo.h6">Submit Review Confirmation</MudText>
            <MudText Typo="Typo.body1">Are you sure you want to submit this review?</MudText>
            <MudButton OnClick="@(async () => await CreateReview())" Color="Color.Primary" Class="mt-2">Yes</MudButton>
            <MudButton OnClick="CancelSubmit" Color="Color.Secondary" Class="mt-2">No</MudButton>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter]
    public int OrderId { get; set; }

    private CreateReviewRequestDTO newReview = new CreateReviewRequestDTO
        {
            OrderId = 0, // Hardcoded OrderId
            Rating = 5,
            Comment = ""
        };

    private bool showSubmitDialog = false;
    private bool showErrors = false;
    private string errors = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        

        if (!user.Identity.IsAuthenticated || !user.IsInRole("Customer"))
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void ShowSubmitDialog()
    {
        showSubmitDialog = true;
    }

    private async Task CreateReview()
    {
        
        try
        {
            newReview.OrderId = OrderId;
            var result = await ReviewService.AddReview(newReview);

            if (result.Succeeded)
            {
                Snackbar.Add("Review submitted successfully!", Severity.Success);
                showErrors = false;
                NavigationManager.NavigateTo("/my-orders"); // Redirect after success
            }
            else
            {
                errors = result.Error;
                showErrors = true;
                Snackbar.Add("Error submitting review", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            errors = $"An error occurred: {ex.Message}";
            showErrors = true;
            Snackbar.Add("Error occurred during review submission.", Severity.Error);
        }
        finally
        {
            showSubmitDialog = false;
        }
    }

    private void CancelSubmit()
    {
        showSubmitDialog = false;
       
    }

    private void ResetForm()
    {
        newReview = new CreateReviewRequestDTO
            {
                OrderId = 0, // Hardcoded OrderId
                Rating = 5,
                Comment = ""
            };
    }
}

<style>
    .custom-dialog-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custom-dialog {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        max-width: 500px;
        width: 100%;
    }
</style>
