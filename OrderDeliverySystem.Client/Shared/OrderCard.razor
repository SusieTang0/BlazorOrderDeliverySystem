@using MudBlazor
@using OrderDeliverySystem.Share.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Security.Claims
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer


<MudGrid>
    <MudItem xs="12" sm="12" md="12" Class="d-flex justify-content-between align-items-center border-b-4 border-solid" Style="border-color:rgba(112, 0, 0, 1);">
        <MudText Class="pt-4" Typo="Typo.h6" Align="Align.Center" GutterBottom="true">OrderId: @Order.OrderId</MudText>
       
       
        <MudButton OnClick="OnExpandCollapseClick">@(_detailExpanded ? "Details" : "Details")</MudButton>
    </MudItem>

    <MudItem xs="12" sm="12" md="2">
        <MudImage Src="@Order?.Merchant?.MerchantPic" Width="130" Height="80" Alt="@Order?.Merchant?.BusinessName" Class="rounded-lg mt-4 my-2" />
    </MudItem>
    <MudItem xs="12" sm="12" md="3">
        <MudGrid>
            <MudItem xs="12">
                <MudText Class="pb-2" Typo="Typo.h5">@Order.Merchant.BusinessName</MudText>
                <div Class="pb-2">

                    <MudText  Typo="Typo.body2"> <MudIcon  Icon="@Icons.Material.Outlined.AccessTime"></MudIcon> Lead Time: @Order.Merchant.PreparingTime mins</MudText>
                </div>
                <div Class="pb-2">
                    @foreach (var address in Order.Merchant.User.Addresses)
                    {
                        <MudText Class="d-inline-block" Typo="Typo.body2">
                            <MudIcon Class="d-inline-block" Icon="@Icons.Material.Outlined.LocationOn"></MudIcon> 
                            Address:  @((@address.Unit != "" ? @address.Unit + ", " : "") +
                        (@address.Address != "" ? @address.Address + ", " : "") +
                        (@address.City != "" ? @address.City + ", " : "") +
                        (@address.Province != "" ? @address.Province + ", " : "") +
                        (@address.Postcode ?? ""))
                        </MudText>
                    }
                </div>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12" sm="12" md="5" Class="d-flex justify-content-center align-item-center"  GutterBottom="true">
       <div>
            <MudText Typo="Typo.body1" Align="Align.Start">Order Time: @Order.CreatedAt.ToString("MM/dd/yyyy hh:mm tt")</MudText>
            <MudText Typo="Typo.body1" Align="Align.Start">
                Arrival time: @Order?.CreatedAt.AddMinutes(Order?.Merchant?.PreparingTime.HasValue == true
                ? Order.Merchant.PreparingTime.Value + 30
                : 45).ToString("MM/dd/yyyy hh:mm tt")
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Start">Status: @Order.Status</MudText>
            <MudLink OnClick="GoTracking"> <MudText Typo="Typo.body1" Align="Align.Start">Delivery Tracking-></MudText></MudLink>
        </div>
    </MudItem>
    <MudItem xs="12" sm="12" md="2">
        <MudText Class="pt-4" Typo="Typo.h6" Align="Align.Center" GutterBottom="true">Amount: @Order.TotalAmount.ToString("C2", CultureInfo.CreateSpecificCulture("en-CA"))</MudText>
        @if (!CanReview)
        {
            <AuthorizeView Roles="Customer">
                <Authorized>
                    <MudButton Class="rounded-pill" Style="width:100%;color:white; background-color: rgba(112, 0, 0, 1);" @onclick="OpenCreateReviewDialogAsync">
                                Write Review
                            </MudButton>
                </Authorized>
            </AuthorizeView>
        }
        else
        {
            <AuthorizeView Roles="Customer">
                <Authorized>
                    <MudButton Class="rounded-pill" Style="width:100%;background-color:lightgray; color: rgba(112, 0, 0, 1);" @onclick="OpenReviewDialogAsync">
                        Read Review
                    </MudButton>
                </Authorized>
            </AuthorizeView>
        }
    </MudItem>

    <MudItem xs="12" sm="12" md="12">
        <MudCollapse Expanded="_detailExpanded">
            <MudDivider Class="border-t-2 border-solid mt-4" Style="border-color:rgba(112, 0, 0, 1);"></MudDivider>
            <MudGrid>
                <MudItem xs="12" sm="12" md="9">
                    <MudText>Name： @Order.Customer.User.FirstName @Order.Customer.User.LastName</MudText>
                    <MudText>Phone:@Order.Customer.User.Phone</MudText>
                    <MudText>Address: @Order.Customer.User.Addresses.</MudText>
                    <MudDivider Class="border-t-2 border-solid mt-4" Style="border-color:rgba(112, 0, 0, 1);"></MudDivider>
                    @if (Order.OrderItems!= null)
                    {
                        foreach (var theitem in Order.OrderItems)
                        {
                            <div class="d-flex justify-content-around align-items-center">
                               <MudText>@theitem.ItemName</MudText>
                                <MudText> @theitem.ItemPrice</MudText>
                                <MudText>@theitem.Quantity</MudText>
                            </div>
                        }
                    }
                </MudItem>
                <MudItem xs="12" sm="12" md="3">
                    <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Total(Before tax):  @Order.TotalAmount.ToString("C2", CultureInfo.CreateSpecificCulture("en-CA"))</MudText>
                    <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Tax (15%):  @GetTaxAmount().ToString("C2", CultureInfo.CreateSpecificCulture("en-CA"))</MudText>
                    <MudText Class="pt-4 ps-6" Typo="Typo.body2" Align="Align.Start" GutterBottom="true">Total(After tax):  @GetTotalAfterTax().ToString("C2", CultureInfo.CreateSpecificCulture("en-CA"))</MudText>
                    <MudText Class="pt-4 ps-6 border-b-2 border-solid mb-2" Typo="Typo.body2" Align="Align.Start" GutterBottom="true" Style="border-color:rgba(112, 0, 0, 1);">Delivery Fee:  $6 ( $3/ km )</MudText>
                    <MudText Class="pt-4 ps-6" Typo="Typo.subtitle2" Align="Align.Start" GutterBottom="true">Total Amount:  @GetTotalAmount().ToString("C2", CultureInfo.CreateSpecificCulture("en-CA"))</MudText>
                </MudItem>
            </MudGrid>
        </MudCollapse>
            
      
    </MudItem>

    <MudItem xs="12" sm="12" md="12" Class="d-flex justify-content-between align-items-center border-t-4 border-solid mt-4" Style="border-color:rgba(112, 0, 0, 1);">

    </MudItem>
    
</MudGrid>


@code {
    [Parameter]
    public OrderDTO Order{ get; set; }

    [Parameter]
    public bool CanReview { get; set; }

    private const decimal TaxRate = 0.15m;
    private const decimal DeliveryFee = 6.00m;
    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

      

    
    }

    bool _detailExpanded = false;

    private void OnExpandCollapseClick()
    {
        _detailExpanded = !_detailExpanded;
    }
    

    private void GoTracking()
    {
        NavigationManager.NavigateTo($"/tracking/{Order.OrderId}");
       
    }

    private decimal GetTaxAmount()
    {
        return Order.TotalAmount * TaxRate;
    }
    private decimal GetTotalAfterTax()
    {
        return Order.TotalAmount + GetTaxAmount();
    }
    private decimal GetTotalAmount()
    {
        return GetTotalAfterTax() + DeliveryFee;
    }
   
    private Task OpenReviewDialogAsync()
    {
        var parameters = new DialogParameters<ReviewDialog> { 
            { x => x.OrderId, Order.OrderId } ,
             { x => x.Review, Order.Reviews }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };

        return DialogService.ShowAsync<ReviewDialog>("Simple Dialog", options);
    }

    private Task OpenCreateReviewDialogAsync()
    {
        var parameters = new DialogParameters<CreateReviewDialog> {
            { x => x.OrderId, Order.OrderId }  
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.ExtraLarge };
       

        return DialogService.ShowAsync<CreateReviewDialog>("Simple Dialog", options);
    }


}
