@using MudBlazor
@using OrderDeliverySystem.Share.DTOs.ReviewDTO
@inject ISnackbar Snackbar
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService AuthorizationService


    <div class="d-flex justify-content-between align-items-center">
       
    </div>
    <MudDivider Class="mb-2" Style="border-color:rgba(112, 0, 0, 1);" />
    <MudTextField Value="@OrderId" Label="Order Id" ReadOnly="true" />
    <MudRating SelectedValue="Review.Rating" Size="Size.Medium" Label="Rating" ReadOnly="true" />
    <MudTextField Value="@Review.CreatedAt?.ToString("MM/dd/yyyy hh:mm:ss tt")" Label="Create At" ReadOnly="true" />
    <MudTextField Value="@Review.Comment" Label="Comment" ReadOnly="true" />
    @if (Review.Reply != null && Review.Reply != "")
    {
        <MudDivider Class="mb-2" />
        <MudTextField Value="@Review.ReplyCreatedAt" Label="Reply Time" ReadOnly="true" />
        <MudTextField Value="@Review.Reply" Label="Merchant Reply" ReadOnly="true" />

    }

@code {
    [Parameter] public int OrderId { get; set; }

    
    private GetReviewResponseDTO Review { get; set; } = new GetReviewResponseDTO();
    private ClaimsPrincipal user;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }
}
